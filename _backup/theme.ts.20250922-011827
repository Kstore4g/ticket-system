export type Theme = {
  name: string;
  colors: {
    appBg: string;
    text: string;
    textMuted: string;

    surface: string;          // 通常面
    surfaceElevated: string;  // 少し持ち上がった面（グラデ用）
    border: string;

    chipBg: string;
    chipBorder: string;
    chipText?: string;

    radioBg: string;
    radioActive: string;      // 選択時のアクセント

    buttonBg: string;
    buttonBorder: string;
    buttonText?: string;

    badgeBg: string;
    badgeText?: string;

    sliderTrack: string;
    sliderFill: string;
    knobStart: string;        // ノブの上グラデ起点
    knobEnd: string;          // ノブの下グラデ終点

    scrollbarThumb: string;
  };
  shadows: {
    sm: string;
    lg: string;
  };
};

export const THEME_LIGHT: Theme = {
  name: "light",
  colors: {
    appBg: "#f5f5f7",
    text: "#111827",
    textMuted: "#6b7280",

    surface: "#ffffff",
    surfaceElevated: "#f3f4f6",
    border: "rgba(0,0,0,0.08)",

    chipBg: "#f3f4f6",
    chipBorder: "rgba(0,0,0,0.10)",
    chipText: "#374151",

    radioBg: "#ffffff",
    radioActive: "rgba(0,0,0,0.25)",

    buttonBg: "#ffffff",
    buttonBorder: "rgba(0,0,0,0.10)",
    buttonText: "#111827",

    badgeBg: "#ffffff",
    badgeText: "#111827",

    sliderTrack: "rgba(0,0,0,0.05)",
    sliderFill: "rgba(0,0,0,0.08)",
    knobStart: "#ffffff",
    knobEnd: "#e5e7eb",

    scrollbarThumb: "rgba(0,0,0,0.10)",
  },
  shadows: {
    sm: "0 1px 1px rgba(0,0,0,0.04)",
    lg: "0 10px 30px rgba(0,0,0,0.06)",
  },
};

// 将来、ダークテーマを足す場合の雛形
export const THEME_DARK: Theme = {
  ...THEME_LIGHT,
  name: "dark",
  colors: {
    ...THEME_LIGHT.colors,
    appBg: "#0b0b0c",
    text: "#f3f4f6",
    textMuted: "#9ca3af",
    surface: "#151517",
    surfaceElevated: "#1b1c1f",
    border: "rgba(255,255,255,0.12)",
    chipBg: "#1f2023",
    chipBorder: "rgba(255,255,255,0.16)",
    radioBg: "#1b1c1f",
    buttonBg: "#1b1c1f",
    badgeBg: "#1b1c1f",
    sliderTrack: "rgba(255,255,255,0.08)",
    sliderFill: "rgba(255,255,255,0.14)",
    knobStart: "#2a2b2f",
    knobEnd: "#1b1c1f",
    scrollbarThumb: "rgba(255,255,255,0.16)",
    radioActive: "rgba(255,255,255,0.35)",
  },
  shadows: {
    sm: "0 1px 1px rgba(0,0,0,0.6)",
    lg: "0 10px 30px rgba(0,0,0,0.55)",
  },
};

// CSS変数へ展開
export function applyTheme(theme: Theme) {
  if (typeof document === "undefined") return;
  const r = document.documentElement.style;
  const c = theme.colors, s = theme.shadows;
  r.setProperty("--bg-app", c.appBg);
  r.setProperty("--text", c.text);
  r.setProperty("--text-muted", c.textMuted);

  r.setProperty("--surface", c.surface);
  r.setProperty("--surface-elev", c.surfaceElevated);
  r.setProperty("--border", c.border);

  r.setProperty("--chip-bg", c.chipBg);
  r.setProperty("--chip-border", c.chipBorder);
  if (c.chipText) r.setProperty("--chip-text", c.chipText);

  r.setProperty("--radio-bg", c.radioBg);
  r.setProperty("--accent", c.radioActive);

  r.setProperty("--btn-bg", c.buttonBg);
  r.setProperty("--btn-border", c.buttonBorder);
  if (c.buttonText) r.setProperty("--btn-text", c.buttonText);

  r.setProperty("--badge-bg", c.badgeBg);
  if (c.badgeText) r.setProperty("--badge-text", c.badgeText);

  r.setProperty("--slider-track", c.sliderTrack);
  r.setProperty("--slider-fill", c.sliderFill);
  r.setProperty("--knob-start", c.knobStart);
  r.setProperty("--knob-end", c.knobEnd);

  r.setProperty("--scrollbar-thumb", c.scrollbarThumb);

  r.setProperty("--shadow-sm", s.sm);
  r.setProperty("--shadow-lg", s.lg);
}
