import React, { useMemo, useState } from "react";
import ProductCard from "../components/ProductCard";
import CartPanel from "../components/CartPanel";
import { LAYOUT } from "../lib/layout";
import { categories, products, type Product as ProductType } from "../data/catalog";

type Item = { product: ProductType; qty: number };

export default function HomePage() {
  const [selectedCategory, setSelectedCategory] = useState<string>(categories[0]?.id ?? "");
  const [items, setItems] = useState<Item[]>([]);
  const [selectedPay, setSelectedPay] = useState<string>("cash");

  const visibleProducts = useMemo(() => {
    return products.filter(p => p.categoryId === selectedCategory);
  }, [selectedCategory]);

  const onAdd = (p: ProductType) => {
    setItems((prev) => {
      const i = prev.findIndex((x) => x.product.id === p.id);
      if (i >= 0) {
        const copy = [...prev];
        copy[i] = { ...copy[i], qty: copy[i].qty + 1 };
        return copy;
      }
      return [...prev, { product: p, qty: 1 }];
    });
  };
  const onInc = (id: string) =>
    setItems((prev) => prev.map((it) => (it.product.id === id ? { ...it, qty: it.qty + 1 } : it)));
  const onDec = (id: string) =>
    setItems((prev) =>
      prev
        .map((it) => (it.product.id === id ? { ...it, qty: Math.max(0, it.qty - 1) } : it))
        .filter((it) => it.qty > 0)
    );
  const onConfirm = () => {
    alert("決済確定（" + selectedPay + "）");
    setItems([]);
  };

  const getQty = (id: string) => items.find((it) => it.product.id === id)?.qty ?? 0;

  return (
    <div className="h-screen w-screen overflow-hidden bg-[#f5f5f7]">
      <div
        className="flex h-full"
        style={{ gap: LAYOUT.columnGapPx, padding: LAYOUT.outerPaddingPx }}
      >
        {/* 左：カテゴリ（幅・アイコン径・アイコン間隔を LAYOUT で制御） */}
        <aside
          className="ios-section p-2 hidden sm:block relative z-10"
          role="radiogroup"
          aria-label="カテゴリ"
          onClickCapture={(e) => e.stopPropagation()}
          style={{ width: LAYOUT.leftColWidthPx }}
        >
          <div
            className="grid auto-rows-min place-items-center"
            style={{ gap: LAYOUT.categoryIconGapPx }}
          >
            {categories.map((c) => {
              const active = selectedCategory === c.id;
              return (
                <button
                  key={c.id}
                  type="button"
                  onClick={() => setSelectedCategory(c.id)}
                  className="flex flex-col items-center gap-1 ui-focus"
                  role="radio"
                  aria-checked={active}
                  aria-label={"カテゴリ " + c.name}
                >
                  <div
                    className={"btn-radio-icon " + (active ? "btn-radio-active" : "")}
                    style={{ width: LAYOUT.categoryIconPx, height: LAYOUT.categoryIconPx }}
                  >
                    {c.icon ? c.icon : c.name[0]}
                  </div>
                  <div className={"btn-radio-label " + (active ? "text-neutral-900" : "")}>{c.name}</div>
                </button>
              );
            })}
          </div>
        </aside>

        {/* 中央：1行リスト（行全体タップで追加） */}
        <main className="flex-1 overflow-auto relative z-0">
          <div className="flex flex-col pr-1" style={{ gap: LAYOUT.listRowGapPx }}>
            {visibleProducts.map((p) => (
              <ProductCard
                key={p.id}
                product={p}
                qty={getQty(p.id)}
                onAdd={onAdd}
              />
            ))}
          </div>
        </main>

        {/* 右：注文（幅は LAYOUT） */}
        <aside
          className="ios-section p-2 relative z-10"
          onClickCapture={(e) => e.stopPropagation()}
          style={{ width: LAYOUT.rightColWidthPx }}
        >
          <CartPanel
            items={items}
            onInc={onInc}
            onDec={onDec}
            onConfirm={onConfirm}
            selectedPay={selectedPay}
            onChangePay={setSelectedPay}
          />
        </aside>
      </div>
    </div>
  );
}
