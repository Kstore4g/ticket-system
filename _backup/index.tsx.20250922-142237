import React, { useMemo, useState } from "react";
import ProductCard from "../components/ProductCard";
import CartPanel from "../components/CartPanel";
import { LAYOUT } from "../lib/layout";
import { categories, products, type Product as ProductType } from "../data/catalog";


type CategoryAny = { id?: string; name?: string; code?: string; icon?: string };
function productCategoryCandidates(p: any): string[] {
  return [
    p.categoryId, p.category_id, p.category, p.categoryCode, p.category_code,
    p.category?.id, p.category?.code, p.category?.name
  ].filter(Boolean).map(String);
}
function categoryCandidates(c: CategoryAny | undefined): string[] {
  if (!c) return [];
  const anyC: any = c;
  return [c.id, c.name, anyC.code].filter(Boolean).map(String);
}
function belongsToCategory(p: any, cid: string): boolean {
  if (!cid || cid === "all") return true;
  const pc = productCategoryCandidates(p);
  // 1) 直ヒット（id/name/code いずれか）
  if (pc.includes(String(cid))) return true;
  // 2) 選択中カテゴリの候補と突き合わせ
  const catFromId = categories.find(c => String(c.id) === String(cid));
  const catFromAny = catFromId ?? categories.find(c => categoryCandidates(c).includes(String(cid)));
  const cc = categoryCandidates(catFromAny);
  return pc.some(v => cc.includes(v));
}type Item = { product: ProductType; qty: number };
const isUrl = (s?: string) => !!s && /^(https?:)?\/\//.test(s);

export default function HomePage() {
  const [selectedCategory, setSelectedCategory] = useState<string>(categories[0]?.id ?? "");
  const [items, setItems] = useState<Item[]>([]);
  const [selectedPay, setSelectedPay] = useState<string>("cash");

  const visibleProducts = useMemo(() => products.filter(p => belongsToCategory(p, selectedCategory)), [selectedCategory]);

  const onAdd = (p: ProductType) => {
    setItems((prev) => {
      const i = prev.findIndex((x) => x.product.id === p.id);
      if (i >= 0) { const copy = [...prev]; copy[i] = { ...copy[i], qty: copy[i].qty + 1 }; return copy; }
      return [...prev, { product: p, qty: 1 }];
    });
  };
  const onInc = (id: string) => setItems((prev) => prev.map((it) => (it.product.id === id ? { ...it, qty: it.qty + 1 } : it)));
  const onDec = (id: string) =>
    setItems((prev) => prev.map((it) => (it.product.id === id ? { ...it, qty: Math.max(0, it.qty - 1) } : it))).filter((it) => it.qty > 0);
  const onConfirm = () => { alert("決済確定（" + selectedPay + "）"); setItems([]); };
  const getQty = (id: string) => items.find((it) => it.product.id === id)?.qty ?? 0;

  return (
    <div className="h-screen w-screen overflow-hidden" style={{ background: "var(--bg-app)" }}>
      <div
        className="flex h-full"
        style={{
          gap: LAYOUT.columnGapPx,
          paddingTop: LAYOUT.outerPaddingTopPx,
          paddingRight: LAYOUT.outerPaddingRightPx,
          paddingBottom: LAYOUT.outerPaddingBottomPx,
          paddingLeft: LAYOUT.outerPaddingLeftPx
        }}
      >
        {/* 左：カテゴリ */}
        <aside
          className="ios-section p-2 hidden sm:block relative z-10"
          role="radiogroup"
          aria-label="カテゴリ"
          style={{ width: LAYOUT.leftColWidthPx }}
        >
          <div className="grid auto-rows-min place-items-center" style={{ gap: LAYOUT.categoryIconGapPx }}>
            {categories.map((c) => {
              const active = selectedCategory === c.id;
              return (
                <button
                  key={c.id}
                  type="button"
                  onClick={() => setSelectedCategory(c.id)}
                  className="flex flex-col items-center gap-1 ui-focus"
                  role="radio"
                  aria-checked={active}
                  aria-label={"カテゴリ " + c.name}
                  style={{ fontSize: LAYOUT.categoryLabelPx }}
                >
                  <div
                    className={"btn-radio-icon " + (active ? "btn-radio-active" : "")}
                    style={{ width: LAYOUT.categoryIconPx, height: LAYOUT.categoryIconPx, display: "flex", alignItems: "center", justifyContent: "center" }}
                  >
                    {isUrl(c.icon)
                      ? <img src={c.icon!} alt={c.name} style={{
                          width: LAYOUT.categoryIconInnerImagePx, height: LAYOUT.categoryIconInnerImagePx,
                          transform: "translate(" + LAYOUT.categoryIconInnerOffsetXPx + "px," + LAYOUT.categoryIconInnerOffsetYPx + "px)"
                        }} />
                      : <span style={{
                          fontSize: LAYOUT.categoryIconInnerFontPx,
                          transform: "translate(" + LAYOUT.categoryIconInnerOffsetXPx + "px," + LAYOUT.categoryIconInnerOffsetYPx + "px)"
                        }}>{c.icon ?? c.name[0]}</span>
                    }
                  </div>
                  <div className="btn-radio-label" style={{ fontSize: LAYOUT.categoryLabelPx }}>{c.name}</div>
                </button>
              );
            })}
          </div>
        </aside>

        {/* 中央：1行リスト（行全体タップで追加） */}
        <main className="flex-1 overflow-auto relative z-0">
          <div className="flex flex-col pr-1" style={{ gap: LAYOUT.listRowGapPx }}>
            {visibleProducts.map((p) => (
              <ProductCard key={p.id} product={p} qty={getQty(p.id)} onAdd={onAdd} />
            ))}
          </div>
        </main>

        {/* 右：注文 */}
        <aside className="ios-section p-2 relative z-10" style={{ width: LAYOUT.rightColWidthPx }}>
          <CartPanel
            items={items}
            onInc={onInc}
            onDec={onDec}
            onConfirm={onConfirm}
            selectedPay={selectedPay}
            onChangePay={setSelectedPay}
          />
        </aside>
      </div>
    </div>
  );
}



