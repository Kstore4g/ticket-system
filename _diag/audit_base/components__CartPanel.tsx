import React from "react"; import SlideToConfirm from "./SlideToConfirm"; import { type Product } from "../data/catalog"; import { LAYOUT } from "../lib/layout";  type CartItem = { product: Product; qty: number };  type CartPanelProps = {   items: CartItem[];   onInc: (id: string) => void;   onDec: (id: string) => void;   onConfirm: () => void;   paymentMethods?: { id: string; name: string; icon?: string }[];   selectedPay: string;   onChangePay: (id: string) => void; };  const isUrl = (s?: string) => !!s && /^(https?:)?\/\//.test(s);  export default function CartPanel({   items, onInc, onDec, onConfirm,   paymentMethods = [     { id: "cash", name: "迴ｾ驥・ },     { id: "card", name: "繧ｫ繝ｼ繝・ },     { id: "qr",  name: "QR"    },   ],   selectedPay, onChangePay, }: CartPanelProps) {   const total = items.reduce((s, it) => s + it.product.price * it.qty, 0);   const selectedPayName = paymentMethods.find(m => m.id === selectedPay)?.name ?? "窶・;    const handlePayClick = (e: React.MouseEvent, id: string) => { e.preventDefault(); e.stopPropagation(); onChangePay(id); };   const handleDec = (e: React.MouseEvent, id: string) => { e.preventDefault(); e.stopPropagation(); onDec(id); };   const handleInc = (e: React.MouseEvent, id: string) => { e.preventDefault(); e.stopPropagation(); onInc(id); };    return (     <div className="h-full flex flex-col gap-3" onClickCapture={(e) => e.stopPropagation()}>       {/* 謾ｯ謇輔＞譁ｹ豕・*/}       <div className="ios-section p-2">         <div className="flex items-center justify-between gap-2">           <div className="flex items-center flex-wrap" role="radiogroup" aria-label="謾ｯ謇輔＞譁ｹ豕・ style={{ gap: LAYOUT.paymentIconGapPx }}>             {paymentMethods.map((m) => {               const active = m.id === selectedPay;               return (                 <button                   key={m.id}                   type="button"                   onClick={(e) => handlePayClick(e, m.id)}                   onMouseDown={(e) => { e.preventDefault(); e.stopPropagation(); }}                   className="flex flex-col items-center gap-1 ui-focus"                   role="radio"                   aria-checked={active}                   aria-label={"謾ｯ謇輔＞譁ｹ豕・" + m.name}                 >                   <div                     className={"btn-radio-icon " + (active ? "btn-radio-active" : "")}                     style={{ width: LAYOUT.payIconPx, height: LAYOUT.payIconPx, display: "flex", alignItems: "center", justifyContent: "center" }}                   >                     {isUrl(m.icon)                       ? <img src={m.icon!} alt={m.name} style={{                           width: LAYOUT.payIconInnerImagePx, height: LAYOUT.payIconInnerImagePx,                           transform: "translate(" + LAYOUT.payIconInnerOffsetXPx + "px," + LAYOUT.payIconInnerOffsetYPx + "px)"                         }} />                       : <span style={{                           fontSize: LAYOUT.payIconInnerFontPx,                           transform: "translate(" + LAYOUT.payIconInnerOffsetXPx + "px," + LAYOUT.payIconInnerOffsetYPx + "px)"                         }}>{m.icon ? m.icon : m.name[0]}</span>                     }                   </div>                   <div className="btn-radio-label" style={{ fontSize: LAYOUT.paymentLabelPx }}>{m.name}</div>                 </button>               );             })}           </div>            <div className="shrink-0 flex items-center gap-2" style={{ color: "var(--text-muted)", fontSize: LAYOUT.selectedLabelPx }}>             <span>驕ｸ謚樔ｸｭ</span>             <span className="ios-chip">{selectedPayName}</span>           </div>         </div>       </div>        {/* 豕ｨ譁・Μ繧ｹ繝・*/}       <div className="ios-section flex-1 overflow-auto">         {items.length === 0 ? (           <div className="p-3" style={{ color: "var(--text-muted)", fontSize: 12 }}>縺ｾ縺蝠・刀縺後≠繧翫∪縺帙ｓ</div>         ) : (           <ul>             {items.map((it, idx) => (               <li key={it.product.id} className={"px-3 py-2 " + (idx>0 ? "ios-sep " : "") + "flex items-center gap-2"}>                 <div className="flex-1 min-w-0">                   <div className="truncate" style={{ fontSize: LAYOUT.cartItemNamePx }}>{it.product.name}</div>                   <div style={{ color: "var(--text-muted)", fontSize: LAYOUT.cartItemPricePx }}>ﾂ･{it.product.price.toLocaleString()}</div>                 </div>                 <div className="flex items-center" style={{ gap: 6 }}>                   <button                     type="button"                     onClick={(e) => handleDec(e, it.product.id)}                     className="btn-round-sm"                     aria-label={it.product.name + " 繧・縺､貂帙ｉ縺・}                     style={{ width: LAYOUT.plusMinusPx, height: LAYOUT.plusMinusPx, fontSize: LAYOUT.plusMinusFontPx }}                   >竏・/button>                   <div className="text-center" style={{ width: LAYOUT.cartQtyWidthPx, fontSize: LAYOUT.cartQtyFontPx }}>{it.qty}</div>                   <button                     type="button"                     onClick={(e) => handleInc(e, it.product.id)}                     className="btn-round-sm"                     aria-label={it.product.name + " 繧・縺､蠅励ｄ縺・}                     style={{ width: LAYOUT.plusMinusPx, height: LAYOUT.plusMinusPx, fontSize: LAYOUT.plusMinusFontPx }}                   >・・/button>                 </div>               </li>             ))}           </ul>         )}       </div>        {/* 蜷郁ｨ・*/}       <div className="ios-section px-3 py-2 flex items-center justify-between">         <span style={{ fontSize: LAYOUT.totalsLabelPx }}>蜷郁ｨ・/span>         <span className="font-semibold" style={{ fontSize: LAYOUT.totalsValuePx }}>ﾂ･{total.toLocaleString()}</span>       </div>        {/* 繧ｹ繝ｩ繧､繝峨＠縺ｦ豎ｺ貂・*/}       <SlideToConfirm onConfirm={onConfirm} />     </div>   ); }