import React from "react"; import { type Product } from "../data/catalog"; import { LAYOUT } from "../lib/layout";  type ProductCardProps = {   product: Product;   qty?: number;   onAdd: (p: Product) => void; };  export default function ProductCard({ product, qty = 0, onAdd }: ProductCardProps) {   const onActivate = () => onAdd(product);   const onKeyDown: React.KeyboardEventHandler<HTMLButtonElement> = (e) => {     if (e.currentTarget !== document.activeElement) return;     if (e.key === "Enter" || e.key === " ") { e.preventDefault(); onAdd(product); }   };    return (     <button       data-role="product-card"       type="button"       onClick={onActivate}       onKeyDown={onKeyDown}       className="row-card ui-tap ui-focus" style={{ position: "relative" }}       aria-label={product.name + " 繧定ｿｽ蜉"}     >       <div className="flex items-center gap-3">         {product.imageUrl ? (           // eslint-disable-next-line @next/next/no-img-element           <img             src={product.imageUrl}             alt={product.name}             className="rounded-xl object-cover"             style={{ width: LAYOUT.productImagePx, height: LAYOUT.productImagePx, border: "1px solid var(--border)" }}           />         ) : (           <div             className="rounded-xl"             style={{ width: LAYOUT.productImagePx, height: LAYOUT.productImagePx, background: "var(--surface-elev)", border: "1px solid var(--border)" }}           />         )}          <div className="flex-1 min-w-0">           <div             className="truncate font-semibold leading-tight"             style={{ fontSize: LAYOUT.productNamePx, transform: "translate(" + LAYOUT.productNameOffsetXPx + "px," + LAYOUT.productNameOffsetYPx + "px)" }}           >             {product.name}           </div>           <div             className="leading-tight"             style={{               fontSize: LAYOUT.productPricePx,               color: "var(--text-muted)",               transform: "translate(" + LAYOUT.productPriceOffsetXPx + "px," + LAYOUT.productPriceOffsetYPx + "px)"             }}           >             ﾂ･{product.price.toLocaleString()}           </div>           {product.allergy?.length ? (             <div               className="flex flex-wrap gap-1 mt-1"               style={{ transform: "translate(" + LAYOUT.allergyOffsetXPx + "px," + LAYOUT.allergyOffsetYPx + "px)" }}             >               {product.allergy.slice(0, 8).map((al) => (                 <span key={al} className="ios-chip" style={{ fontSize: LAYOUT.allergyChipFontPx }}>{al}</span>               ))}             </div>           ) : null}         </div>          <div className="shrink-0" style={{ position: "absolute", top: LAYOUT.qtyBadgeOffsetTopPx, right: LAYOUT.qtyBadgeOffsetRightPx, zIndex: LAYOUT.qtyBadgeZIndex, pointerEvents: "none" }}>           <div             className="flex items-center justify-center"             style={{               background: "var(--badge-bg)",               color: "var(--badge-text)",               minWidth: LAYOUT.qtyBadgeMinWidthPx,               height: LAYOUT.qtyBadgeHeightPx,               paddingInline: LAYOUT.qtyBadgePaddingInlinePx,               fontSize: LAYOUT.qtyTextPx,               border: "1px solid var(--border)",               boxShadow: "var(--shadow-sm)",               // 蝗幃嚆縺ｮ隗剃ｸｸ繧貞句挨謖・ｮ・              borderTopLeftRadius: LAYOUT.qtyBadgeRadiusTopLeftPx,               borderTopRightRadius: LAYOUT.qtyBadgeRadiusTopRightPx,               borderBottomRightRadius: LAYOUT.qtyBadgeRadiusBottomRightPx,               borderBottomLeftRadius: LAYOUT.qtyBadgeRadiusBottomLeftPx,             }}           >             {qty}           </div>         </div>       </div>     </button>   ); }  